import org.gradle.internal.logging.text.StyledTextOutputFactory

import static org.gradle.internal.logging.text.StyledTextOutput.Style

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion 33

    defaultConfig {
        applicationId "com.google.mlkit.md"
        minSdkVersion 21
        targetSdkVersion 33

        versionCode getGitCommitCount()
        versionName getTag()
        buildConfigField "String", 'GIT_REPOSITORY', "\"" + getGitOriginRemote() + "\""
        buildConfigField "String", 'VERSION', "\"" + versionName + "\""
    }

    signingConfigs {
        def out = services.get(StyledTextOutputFactory).create("")
        if (System.env.USER == "hannes") {
            release {
                def keystore = "${project.gradle.gradleUserHomeDir}/../.android/debug.keystore"
                out.style(Style.Normal).text("I run with user hannes using ")
                        .style(Style.SuccessHeader).println(keystore)
                storePassword "android"
                keyPassword "android"
                keyAlias "androiddebugkey"
                storeFile file(keystore)
            }
        } else if (System.getenv("TRAVIS")) {
            release {
                out.style(Style.Normal).text("I run on TRAVIS")
                storeFile file('../signing/release.keystore')
                storePassword System.getenv("KEYSTORE_PASS")
                keyAlias System.getenv("ALIAS_NAME")
                keyPassword System.getenv("ALIAS_PASS")
            }
        } else {
            release {
                out.style(Style.Normal).text("I run on Github actions")
                storeFile file('../signing/release.keystore')
                storePassword System.getenv("KEYSTORE_PASS")
                keyAlias System.getenv("ALIAS_NAME")
                keyPassword System.getenv("ALIAS_PASS")
            }
        }
        debugCI {
            storeFile file('./debug.keystore')
            storePassword "android"
            keyPassword "android"
            keyAlias "androiddebugkey"
        }
    }

    buildTypes {

        release {
            if (!System.getenv("JITPACK")) {
                signingConfig signingConfigs.release
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            if (System.getenv("CI") == "true") { // Github action
                signingConfig signingConfigs.debugCI
            }

            applicationIdSuffix ".debug"
            versionNameSuffix ".debug"
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/*.kotlin_module']
        }
    }

    namespace 'com.google.mlkit'
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.google.firebase:firebase-analytics:21.2.0'
    implementation 'com.google.firebase:firebase-crashlytics:18.3.2'

    implementation 'com.github.AppDevNext.Logcat:LogcatCoreUI:2.11.3'
    implementation 'com.github.AppDevNext.Logcat:LogcatCrashlyticLib:2.11.3'

    implementation project(':vision-quickstart:visionQuickstartApp')
    implementation project(':material-showcase:materialApp')
    implementation project(':translate-showcase:translateShowCaseApp')
    implementation project(':translate:translateApp')
    implementation project(':smartreply:smartreplyApp')
    implementation project(':automl:automlApp')
    implementation project(':digitalink:digitalinkApp')
    implementation project(':langid:langidApp')
    implementation project(':entityextraction:entityextractionApp')
    implementation 'com.github.hannesa2:githubAppUpdate:2.0-beta3'

    implementation "androidx.core:core-ktx:1.9.0"
}

static def getTag() {
    def tagVersion = "$System.env.TAG_VERSION"
    if (tagVersion.toString() == "null") {
        println "No variable TAG_VERSION specified, I'm using 'git describe --abbrev=0'"
        def process = "git describe --abbrev=0".execute()
        tagVersion = process.text.toString().trim()
        if (tagVersion.toString().equals("")) {
            println "abbrev failed, I'm using 'git --tags'"
            def processT = "git describe --tags".execute()
            tagVersion = processT.text.toString().trim()
        }
    }
    return tagVersion
}

static def getGitCommitCount() {
    def process = "git rev-list HEAD --count".execute()
    return process.text.toInteger()
}

static def getGitOriginRemote() {
    def process = "git remote -v".execute()
    def values = process.text.toString().trim().split("\\r\\n|\\n|\\r")

    def found = values.find { it.startsWith("origin") && it.endsWith("(push)") }
    return found.replace("origin", "").replace("(push)", "").replace(".git", "").trim()
}
